parameters:
  ContainerRegistryAdminUser: ''
  ContainerRegistryPassword: ''

jobs:
- job: BuildAndPublishContainers
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - script: dir $(Build.SourcesDirectory)
    - script: dir $(System.DefaultWorkingDirectory)
  # Build and publish the NCS.AzureDevOpsAgents.OWASP docker image
  - template: AzureDevOpsTemplates/Build/StepTemplates/dfc-docker-publish-k8smanifest.yml@dfc-devops
    parameters:
      ContainerRegistryAdminUser: ${{ parameters.ContainerRegistryAdminUser }}
      ContainerRegistryPassword: ${{ parameters.ContainerRegistryPassword }}
      DockerfileName: owasp-agent.Dockerfile
      DockerfileContext: '../DockerFiles/AzureDevOpsAgents'
      ImageBaseName: NCS.AzureDevOpsAgents.OWASP
      ImageTag: $(Build.BuildNumber)
      ManifestFileName: owasp-agent.kubernetes.yml
  # Build and publish the NCS.AzureDevOpsAgents.JMeter docker image
  - template: AzureDevOpsTemplates/Build/StepTemplates/dfc-docker-publish-k8smanifest.yml@dfc-devops
    parameters:
      ContainerRegistryAdminUser: ${{ parameters.ContainerRegistryAdminUser }}
      ContainerRegistryPassword: ${{ parameters.ContainerRegistryPassword }}
      DockerfileName: jmeter-agent.Dockerfile
      DockerfileContext: '../DockerFiles/AzureDevOpsAgents'
      ImageBaseName: NCS.AzureDevOpsAgents.JMeter
      ImageTag: $(Build.BuildNumber)
      ManifestFileName: jmeter-agent.kubernetes.yml
  # Build and publish the NCS.AzureDevOpsAgents.JMeterSlave docker image
  - template: AzureDevOpsTemplates/Build/StepTemplates/dfc-docker-publish-k8smanifest.yml@dfc-devops
    parameters:
      ContainerRegistryAdminUser: ${{ parameters.ContainerRegistryAdminUser }}
      ContainerRegistryPassword: ${{ parameters.ContainerRegistryPassword }}
      DockerfileName: jmeter-slave.Dockerfile
      DockerfileContext: '../DockerFiles/AzureDevOpsAgents'
      ImageBaseName: NCS.AzureDevOpsAgents.JMeterSlaves
      ImageTag: $(Build.BuildNumber)
      ManifestFileName: jmeter-slaves.kubernetes.yml